# Définition des variables
$NomVM = "srv-2019"
$SuffixeDNS = "labo.lan"

# Vérifier si la sécurité renforcée d'Internet Explorer est désactivée
function Check-IEESC {
    $adminKey = "HKLM:\Software\Microsoft\Active Setup\Installed Components\{A509B1A1-2CE3-4C2E-ABA6-4EED4C751D3A}"
    $userKey = "HKLM:\Software\Microsoft\Active Setup\Installed Components\{A509B1A2-2CE3-4C2E-ABA6-4EED4C751D3A}"
    
    $adminESC = (Get-ItemProperty -Path $adminKey -Name "IsInstalled" -ErrorAction SilentlyContinue).IsInstalled
    $userESC = (Get-ItemProperty -Path $userKey -Name "IsInstalled" -ErrorAction SilentlyContinue).IsInstalled

    if ($adminESC -eq 0 -and $userESC -eq 0) {
        Write-Host "[✔] Sécurité IE désactivée"
    } else {
        Write-Host "[✖] Sécurité IE activée"
    }
}

# Vérifier l'accès à Internet
function Check-InternetAccess {
    $test = Test-NetConnection -ComputerName "google.com" -InformationLevel Quiet
    if ($test) {
        Write-Host "[✔] Accès à Internet disponible"
    } else {
        Write-Host "[✖] Pas d'accès à Internet"
    }
}

# Vérifier l'autorisation du ping en entrée et en sortie
function Check-PingFirewall {
    $pingIn = Get-NetFirewallRule -DisplayName "File and Printer Sharing (Echo Request - ICMPv4-In)" -ErrorAction SilentlyContinue
    $pingOut = Get-NetFirewallRule -DisplayName "File and Printer Sharing (Echo Request - ICMPv4-Out)" -ErrorAction SilentlyContinue

    if ($pingIn.Enabled -and $pingOut.Enabled) {
        Write-Host "[✔] Ping autorisé en entrée et en sortie"
    } else {
        Write-Host "[✖] Ping non autorisé en entrée et/ou en sortie"
    }
}

# Vérifier l'autorisation du Bureau à Distance
function Check-RDP {
    $rdpStatus = (Get-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections").fDenyTSConnections
    if ($rdpStatus -eq 0) {
        Write-Host "[✔] Bureau à Distance activé"
    } else {
        Write-Host "[✖] Bureau à Distance désactivé"
    }
}

# Vérifier si l'IP est statique
function Check-StaticIP {
    $adapter = Get-NetIPConfiguration | Where-Object { $_.IPv4Address -ne $null }
    if ($adapter | Where-Object { $_.Dhcp -eq $false }) {
        Write-Host "[✔] IP statique configurée"
    } else {
        Write-Host "[✖] IP en DHCP"
    }
}

# Vérifier le nom de la VM et le suffixe DNS
function Check-Hostname {
    $hostname = (Get-ComputerInfo).CsName
    $dnsSuffix = (Get-DnsClientGlobalSetting).SuffixSearchList
    if ($hostname -eq $NomVM -and $dnsSuffix -contains $SuffixeDNS) {
        Write-Host "[✔] Nom de la VM et suffixe DNS corrects"
    } else {
        Write-Host "[✖] Nom de la VM ou suffixe DNS incorrects"
    }
}

# Vérifier l'installation des logiciels demandés
function Check-InstalledSoftware {
    param([string]$SoftwareName)
    
    $installed = Get-WmiObject -Query "SELECT * FROM Win32_Product WHERE Name LIKE '%$SoftwareName%'" -ErrorAction SilentlyContinue
    if ($installed) {
        Write-Host "[✔] $SoftwareName est installé"
    } else {
        Write-Host "[✖] $SoftwareName n'est pas installé"
    }
}

# Exécution des contrôles
Check-IEESC
Check-InternetAccess
Check-PingFirewall
Check-RDP
Check-StaticIP
Check-Hostname

Check-InstalledSoftware -SoftwareName "OpenOffice"
Check-InstalledSoftware -SoftwareName "Mozilla Firefox"
Check-InstalledSoftware -SoftwareName "Google Chrome"
Check-InstalledSoftware -SoftwareName "PuTTY"
Check-InstalledSoftware -SoftwareName "WinSCP"
