# Définition des variables
$NomVM = "srv-2019"
$SuffixeDNS = "labo.lan"

# Liste des logiciels à vérifier
$softwares = @("VMWare Tools", "Mozilla Firefox", "Google Chrome", "PuTTY", "WinSCP", "FileZilla", "7-Zip")

function Check-IEESC {
    $adminKey = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap"
    $userKey = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap"

    $adminESC = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap" -Name "IEHarden" -ErrorAction SilentlyContinue).IEHarden
    $userESC = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap" -Name "IEHarden" -ErrorAction SilentlyContinue).IEHarden

    # Vérification des valeurs des clés de registre
    if (($adminESC -eq $null -or $adminESC -eq 0) -and ($userESC -eq $null -or $userESC -eq 0)) {
        Write-Host "[✔] Sécurité IE désactivée"
    } else {
        Write-Host "[✖] Sécurité IE activée"
    }
}

# Vérifier l'accès à Internet
function Check-InternetAccess {
    $test = Test-NetConnection -ComputerName "google.com" -InformationLevel Quiet
    if ($test) {
        Write-Host "[✔] Accès à Internet disponible"
    } else {
        Write-Host "[✖] Pas d'accès à Internet"
    }
}

# Vérifier l'autorisation du ping en entrée et en sortie
function Check-PingFirewall {
    # Noms des règles de pare-feu détectées sur ton système
    $pingInName = "Partage de fichiers et d’imprimantes (Demande d’écho - Trafic entrant ICMPv4)"
    $pingOutName = "Partage de fichiers et d’imprimantes (Demande d’écho - Trafic sortant ICMPv4)"

    # Vérifier si les règles existent et sont activées
    $pingIn = Get-NetFirewallRule -DisplayName $pingInName -ErrorAction SilentlyContinue
    $pingOut = Get-NetFirewallRule -DisplayName $pingOutName -ErrorAction SilentlyContinue

    # Vérification et affichage du statut
    if ($pingIn -and $pingIn.Enabled -eq $true -and $pingOut -and $pingOut.Enabled -eq $true) {
        Write-Host "[✔] Ping autorisé en entrée et en sortie"

    } else {
        Write-Host "[✖] Ping non entièrement autorisé"
        
        # Afficher l'état exact de chaque règle
        if ($pingIn -and $pingIn.Enabled -ne $true) {
            Write-Host "[⚠] Ping entrant désactivé"
        }
        if ($pingOut -and $pingOut.Enabled -ne $true) {
            Write-Host "[⚠] Ping sortant désactivé"
        }
    }
}

# Vérifier l'autorisation du Bureau à Distance
function Check-RDP {
    $rdpStatus = (Get-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections").fDenyTSConnections
    if ($rdpStatus -eq 0) {
        Write-Host "[✔] Bureau à Distance activé"
    } else {
        Write-Host "[✖] Bureau à Distance désactivé"
    }
}

# Vérifier si l'IP est statique
function Check-StaticIP {
    # Récupérer uniquement les interfaces réseau physiques avec une adresse IPv4
    $networkAdapters = Get-NetIPInterface | Where-Object { $_.AddressFamily -eq "IPv4" -and $_.ConnectionState -eq "Connected" }

    if ($networkAdapters.Count -eq 0) {
        Write-Host "[✖] Aucune interface réseau active avec une adresse IPv4 détectée"
        return
    }

    $isStatic = $true

    foreach ($adapter in $networkAdapters) {
        $dhcpStatus = $adapter.Dhcp
        $ipConfig = Get-NetIPConfiguration -InterfaceIndex $adapter.InterfaceIndex

        if ($dhcpStatus -eq "Enabled") {
            Write-Host "[✖] Interface $($adapter.InterfaceAlias) est en DHCP (IP: $($ipConfig.IPv4Address.IPAddress))"
            $isStatic = $false
        } else {
            Write-Host "[✔] Interface $($adapter.InterfaceAlias) utilise une IP statique (IP: $($ipConfig.IPv4Address.IPAddress))"
        }
    }

    if ($isStatic) {
        Write-Host "[✔] Toutes les interfaces utilisent une IP statique"
    } else {
        Write-Host "[⚠] Au moins une interface est encore en DHCP"
    }
}

# Vérifier le nom de la VM et le suffixe DNS
function Check-Hostname {
    $hostname = (Get-ComputerInfo).CsName
    $dnsSuffix = (Get-DnsClientGlobalSetting).SuffixSearchList
    if ($hostname -eq $NomVM -and $dnsSuffix -contains $SuffixeDNS) {
        Write-Host "[✔] Nom de la VM et suffixe DNS corrects"
    } else {
        Write-Host "[✖] Nom de la VM ou suffixe DNS incorrects"
    }
}

# Vérifier l'installation des logiciels demandés
function Check-InstalledSoftware {
    param([string]$SoftwareName)

    # Emplacements des logiciels installés dans la base de registre
    $registryPaths = @(
        "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*",
        "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
    )

    $found = $false

    foreach ($path in $registryPaths) {
        $installedSoftware = Get-ItemProperty -Path $path -ErrorAction SilentlyContinue | Where-Object { $_.DisplayName -match $SoftwareName }

        if ($installedSoftware) {
            Write-Host "[✔] $($installedSoftware.DisplayName) est installé (Version: $($installedSoftware.DisplayVersion))"
            $found = $true
        }
    }

    if (-not $found) {
        Write-Host "[✖] $SoftwareName n'est pas installé"
    }
}


# Exécution des contrôles
clear
Check-InternetAccess
Check-IEESC
Check-PingFirewall
Check-RDP
Check-StaticIP
Check-Hostname

# Exécuter la vérification pour chaque logiciel
foreach ($software in $softwares) {
    Check-InstalledSoftware -SoftwareName $software
}
